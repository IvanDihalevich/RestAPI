// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241102213527_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Airplanes.Airplane", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AirportId")
                        .HasColumnType("uuid")
                        .HasColumnName("airport_id");

                    b.Property<int>("MaxPassenger")
                        .HasColumnType("integer")
                        .HasColumnName("max_passenger");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("integer")
                        .HasColumnName("year_of_manufacture");

                    b.HasKey("Id")
                        .HasName("pk_airplanes");

                    b.HasIndex("AirportId")
                        .HasDatabaseName("ix_airplanes_airport_id");

                    b.ToTable("airplanes", (string)null);
                });

            modelBuilder.Entity("Domain.Airports.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_airports");

                    b.ToTable("airports", (string)null);
                });

            modelBuilder.Entity("Domain.Flights.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AirplaneId")
                        .HasColumnType("uuid")
                        .HasColumnName("airplane_id");

                    b.Property<Guid>("ArrivalAirportId")
                        .HasColumnType("uuid")
                        .HasColumnName("arrival_airport_id");

                    b.Property<DateTime>("ArrivalTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival_time")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("DepartureAirportId")
                        .HasColumnType("uuid")
                        .HasColumnName("departure_airport_id");

                    b.Property<DateTime>("DepartureTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("departure_time")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("FlightName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("flight_name");

                    b.HasKey("Id")
                        .HasName("pk_flights");

                    b.HasIndex("AirplaneId")
                        .HasDatabaseName("ix_flights_airplane_id");

                    b.HasIndex("ArrivalAirportId")
                        .HasDatabaseName("ix_flights_arrival_airport_id");

                    b.HasIndex("DepartureAirportId")
                        .HasDatabaseName("ix_flights_departure_airport_id");

                    b.ToTable("flights", (string)null);
                });

            modelBuilder.Entity("Domain.Passengers.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_passengers");

                    b.ToTable("passengers", (string)null);
                });

            modelBuilder.Entity("Domain.Tickets.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid")
                        .HasColumnName("flight_id");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid")
                        .HasColumnName("passenger_id");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchase_date");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.HasIndex("FlightId")
                        .HasDatabaseName("ix_tickets_flight_id");

                    b.HasIndex("PassengerId")
                        .HasDatabaseName("ix_tickets_passenger_id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("Domain.Airplanes.Airplane", b =>
                {
                    b.HasOne("Domain.Airports.Airport", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_airplanes_airports_airport_id");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("Domain.Flights.Flight", b =>
                {
                    b.HasOne("Domain.Airplanes.Airplane", "Airplane")
                        .WithMany()
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flights_airplanes_airplane_id");

                    b.HasOne("Domain.Airports.Airport", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flights_airports_arrival_airport_id");

                    b.HasOne("Domain.Airports.Airport", "DepartureAirport")
                        .WithMany()
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flights_airports_departure_airport_id");

                    b.Navigation("Airplane");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("Domain.Tickets.Ticket", b =>
                {
                    b.HasOne("Domain.Flights.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_flights_flight_id");

                    b.HasOne("Domain.Passengers.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_passengers_passenger_id");

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });
#pragma warning restore 612, 618
        }
    }
}
